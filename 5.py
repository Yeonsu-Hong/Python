# chapter 5. 리스트와 문자열(string)

# 1. print함수의 복습과 확장 (review)

for i in [1, 2, 3]:     # i에 1, 2, 3을 넣어가며 반복!

	print(i) 

# 기본적으로 print 함수는 출력을 끝내면 줄을 바꿔버린다.

# 줄을 바꾸지 않고 이어서 출력하는 방법


for i in [1, 2, 3]:
	print(i, end = '_')

	# 출력을 마치고 나면 줄 바꾸는 것 대신에 '_'을 출력해주세요 라는 의미 

for i in [1, 2, 3]:
	print(i, end = '  ')   # 줄 바꿈 대신에 빈 공간을 넣어라.


# 2. 리스트형 데이터 

35

# 위와 같이 입력하면 sublime text에서는 출력이 되지 않지만, prompt상에서는 print함수를 호출하지 않고 그냥 입력만 해도 출력이 된다.
# 파이썬이 데이터로 인식한다는 의미

# happy

# 다음과 같이 입력하면 출력이 안된다.

for i in [1, 2, 3]:
	pass    # pass라고 입력하면 아무 일도 하지 않는 for loop가 만들어진다.


# [1, 2, 3]은 파이썬이 인식하는 데이터의 한 종류이다.

# [1, 2, 3]은 정수 1, 2, 3을 묶어 놓은 리스트형(list type) 데이터이다.




type([1, 2, 3]) 	   # [1, 2, 3] 의 데이터 종류는?

# <class 'list'>

# sublime text에서는 누차 강조하지만, type의 함수로 나타내는 것이 힘들다. prompt 창에서는 확인이 가능하다.

# list에서는 여러 개의 값을 묶는것이 사용가능하다. 서로 다른 종류의 값도 얼마든지 묶을 수 있다.

[1, "hello", 3.3] 
[1, 'hello', 3.3]

[1, 2, [3, 4], ["AAA", "ZZZ"]]
[1, 2, [3, 4], ['AAA', 'ZZZ']]


# list를 변수에 담는 것도 가능하다

st = [1, "hello", 3.3]   #list를 변수 st에 담았음

print(st)



# 지금까지 배웠던 데이터의 종류는 다음과 같다. 

# int형 데이터 ex> 1, 2, 3, 4

# float형 데이터 ex> 2.2 4.5 7.8

# list형 데이터 ex> [3, 5, 7, 9]


# 3. 리스트형 데이터의 연산 : 인덱싱 연산


# + 덧셈

# - 뺄셈

# * 곱셈

#  ** 거듭제곱

#  / 실수형 나눗셈

#  // 정수형 나눗셈

#  % 나머지가 얼마?

# list형 데이터를 대상으로도 다음과 같이 덧셈 연산을 할 수 있다.

[1, 2, 3, 4]  + [ 7, 8 ]

# 결괏값 : [1, 2, 3, 4, 7, 8]

[1, 2, 3] * 2   # list의 내용을 두배 늘린 결과 

[1, 2, 3, 1, 2, 3]


# 다음에 나오는 중요한 연산이 있다.

# 1. [] indexing 연산
# 2. [:] slicing 연산

# 1. indexing 연산의 예시

st = [1, 2, 3, 4, 5]
n1 = st[0]   # 첫 번째 값을 꺼내서 n1에 저장
n2 = st[4]   # 다섯 번째 값을 꺼내서 n2에 저장

print (n1, n2)

n1 = st[0]    #st[0]을 n1에 저장

# 변수 st에 담긴 list에서 첫 번째 값을 꺼내서 변수 n1에 저장한다.

n2 = st[4]    # st[4]를 n2에 저장

# indexing 연산에서 값의 꺼냄을 보였는데 값의 수정으로도 사용할수 있다.

#  ex.

st = [1, 2, 3, 4, 5]
st[0] = 5    # 5를 st[0]에 저장
st[4] = 1    # 1을 st[4]에 저장

print(st)


# 정리하자면 다음과 같다.

# 다음과 같이 st[0]가 = 의 오른편에 오면 '값의 꺼냄'을 의미,

num = st[0]    # st[0]의 값을 꺼냄!

# 다음과 같이 =의 왼편에 오면 '값의 수정'을 의미한다.

st[0] = 5     # st[0]에 값 저장!

st = [1, 2, 3, 4, 5]
print(st[0], st[2], st[4])    # st[0], st[2], st[4]의 값을 print 함수에 전달


# [] 사이에 등장하는 값을 가리켜 index 값이라고 하는데, 이 용어는 자주 등장하므로 기억.

# index값은 0 부터 시작하는, 위치를 가리키는 값이다.

st = [1, 2, 3, 4, 5]
print(st[-1], st[-2], st[-3])   # index값으로 음수가 사용되었다. 오른쪽부터 출력

# 그래서 결괏값은 5 4 3



# 연습문제 5-1
# (1). 프롬프트 상에서 다음과 같이 리스트를 선언하고, indexing 연산을 이용해서 리스트에 담긴 내용을 출력해보자

st = [1, 2, 3, 4]

print(st[0])
print(st[1])
print(st[2])
print(st[3])

# (2). 위와 같으나 index값을 음수로만 사용해서 출력해보자

print(st[0])
print(st[-3])
print(st[-2])
print(st[-1])

# (3). 프롬프트 상에서 다음과 같이 리스트를 선언하고, 이 리스트에 담긴 값들을 모두 1씩 증가시키자

st = [1, 2, 3, 4]

st[0] += 1
st[1] += 1
st[2] += 1
st[3] += 1

print(st[0])
print(st[1])
print(st[2])
print(st[3])


# (4). st = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 다음과 같이 리스트를 선언하고 리스트에 담긴값들을 1씩 증가시키자.

# for loop를 이용하여 간결하게 진행해보자.

st = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i in range(10):
	st[i] += 1

print(st)

# (5). st = [1, 2, 3, 4, 5, 6]
# 다음과 같이 list를 선언하고, 첫번째 값과 마지막 값의 교환을 하는 문장 만들기.

st= [1, 2, 3, 4, 5, 6]

st[0], st[-1] = st[-1], st[0]
print(st)


# 4. slicing 연산


# [:]    slicing 연산


st1 = [1, 2, 3, 4, 5, 6, 7, 8]
st2 = st1[2:5]    # st1[2:5]를 꺼내 st2에 저장

print(st2)

# 중요한 것이 있다. 

st2 = st1[2:5]   # st1[2] ~ st1[4]까지 꺼내서 st2에 저장 (st1[2]의 값부터 st1[5] 바로 앞의 값까지)

# 즉, st1[2]부터 st1[4]까지의 값을 꺼내서 st2에 list 형태로 저장하라는 의미

# 값의 꺼냄뿐 아니라 값의 수정에도 사용할 수 있다.


st = [1, 2, 3, 4, 5, 6, 7, 8, 9]

st[2:5] = [0, 0, 0, 0, 0]     #st[2:5]의 위치에 [0, 0, 0, 0, 0]
print(st)

# 슬라이싱 연산의 '값의 수정'은 '부분 교체'로 볼 수 있다. 그리고 위에서 보였듯이 부분 교체를 할 때 값의 개수가 같을 필요는 없다.
# 더 많아도 되고 더 적어도 된다.

# 5. 슬라이싱 연산에서 생략 가능한 부분

st = [1, 2, 3, 4, 5]

st[0:3] = [0, 0, 0]  # list의 첫번째 위치의 값부터 교체에 들어간다.

print(st)

st = [1, 2, 3, 4, 5]

st[:3] = [0, 0, 0] # list의 첫 번째 위치의 값을 의미하는 0 생략!
print(st)


st = [1, 2, 3, 4, 5]
st[2:] = [0, 0, 0] # index값 2의 위치부터 마지막까지 [0, 0, 0]으로 교체

print(st)

# list 전체를 교체하는 경우 다음과 같이 둘다 생략하는 것도 가능하다.

st = [1, 2, 3, 4, 5]
st[:] = [0, 0, 0, 0, 0]   # list 전체를 [0, 0, 0, 0, 0]으로 교체

print(st)

st = [1, 2, 3, 4, 5]
st[:] = [0]   # list 전체를 0 하나로 교체

print(st)

st = []  # 텅 빈 list 생성

print(st)

st= [1, 2, 3, 4, 5]
st[:] = []   # list 전체 내용 삭제

print(st)


# 6. list에서 2칸씩 뛰면서 저장된 값들 꺼내기

st1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
st2 = st1[0:9]    # st1[0] ~ st2[8]까지

print(st2)

# JUMP!

st1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
st2 = st1[0:9:2]    # st1[0] ~ st2[8]까지 2칸씩 뛰면서

print(st2)

# 결괏값 : [1, 3, 5, 7 ,9]


st1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
st2 = st1[0:9:3]     # st1[0] ~ st2[8]까지 3칸씩 뛰면서

print(st2)


# 결괏값 : [1, 4, 7]


# 연습문제 05 -2
# (1). 다음 리스트를 대상으로 2와 4를 삭제하는 문장을 만들어 보자. 
	# (Hint) 이 경우 2와 4를 삭제하기보다는 2,3,4를 3 하나로 교체하려는 노력을 해보기
st = [1, 2, 3, 4, 5]

st[1:4] = [3]

# (2). 다음 리스트를 대상으로 3과 4 사이에 3.5를 넣어보자.
st = [1, 2, 3, 4, 5]

st[2:4] = [3, 3.5, 4]


# (3). 다음 리스트를 대상으로 2, 3 ,4를 삭제

st = [1, 2, 3, 4, 5]
st[1:4] = []
print(st)


# (4). 다음 리스트에 담긴 내용 모두 삭제해보자.

st = [1, 2, 3, 4, 5]
st[:] = []
print(st)

# (5). 다음 리스트를 대상으로 홀수 번째 위치에 저장된 값들만 뽑아서 새로운 리스트를 만들어 변수nt에 작성하는 코드를 작성. 
#  새로 만들어야 할 리스트는 [1, 3, 5, 7, 9] 이다.

st1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

nt = st1[0:9:2]

print(nt)

# (6).위와 같지만, 짝수 번째 위치에 저장된 값들만 뽑아야 한다.

st2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

nt = st2[1:10:2]

print(nt)


# 7. string형 : 문자열

# 파이썬에서 문자열을 표현하는 방법은 다음과 같이 큰따옴표로 묶는 것이다.

# 작은 따옴표로 묶어도 차이는 없다.

# 따옴표로 묶으면 문자열로 인식된다.

# list와 문자열은 상당 부분 유사하기 때문에 리스트를 대상으로 했던 연산 대부분을 문자열을 대상으로도 할 수 있다.

[1, 2] + [3, 4]
[1, 2, 3, 4]

"hello" + "everybody"
'helloeverybody'


[1, 2] * 3   # list를 세배 늘린 결과가 만들어진다.
[1, 2, 1, 2, 1, 2]

"AZ" * 3  # 문자열을 세배 늘린 결과가 만들어진다.  
'AZAZAZ'

st = [1, 2, 3, 4, 5]
print(st[2])    # 세번째 위치의 값만 뽑아냄

str = "simple"
print(str[2])      # 세번째 위치의 값만(문자만) 뽑아냄

# slicing 연산의 예

st = [1, 2, 3, 4, 5, 6, 7]

st[2:5]   # index 값이 2 ~ 4인 위치의 값들 뽑아냄

str = 'antibody'

print(str[2:5])  # index 값이 2 ~ 4인 위치의 값들(문자들) 뽑아냄

# *****중요******* list와 달리 문자열은 그 내용을 바꾸지 못한다
# str = "happy"
# str[0] = "d" # 이렇게 문자열의 일부를 바꿀수 없다.
# 에러가 발생


# 연습문제 05- 3
# 다음 예의 실행 결과를 보자

str = "hello"
str = str + "python"

print(str)

# 이는 str이 갖고 있던 문자열에 "Python"을 뒤에 이어 새로운 문자열을 만드는 과정이다.
# 특히 다음 문장이 그 역할을 한다.

# str = str + "python"

# 앞서 배웠던 += 연산자에 대해 공부했으니, 위 문장을 +=연산자를 이용해서 바꿔보자

str = "hello"
str += "python"

print(str)


# 8. list의 for loop와 문자열 for loop
# list와 문자열은 비슷한 면이 많다.

for i in [1, 2, 3]:
	print(i, end = '')

for i in 'happy':
	print(i, end = ' ')


# 9. list와 문자열을 인자로 전달받는 함수 : len

# len(s)     list s의 길이(저장된 값의 수 반환)

# 이 함수에 list가 담긴 변수 or list 자체를 전달하면 리스트에 저장된 값의 개수를 세어서 이를 반환해준다. 
# 물론 문자열을 전달하면 문자열을 이루는 문자의 개수를 세어서 이를 반환해준다.

st = ['1, 2, 3']
len(st)    # st에 몇 개의 값이 저장되어 있는가?

sr = 'IZONE*WIZONE'
len(sr)    # sr의 문자열 길이는? 12가 나온다. * 도 포함

# 필요하다면, 다음과 같이 반환되는 값을 저장할 수도 있다.

st = [1, 2, 3]
n = len(st)
print(n)


# 10. list와 문자열을 인자로 전달하고 반환하기

# 다음과 같이 int형 값을 전달받거나 반환하는 함수를 만든바 있다.

def so_simple1(num):    # 매개 변수 num을 통해 값을 받음
	return num + 1   # num + 1의 결과 반환

n = so_simple1(7)    # 함수 호출하면서 7 전달, 그리고 반환되는 값 n에 저장
print(n)

# 마찬가지로 다음과 같이 함수의 매개변수에 list도 인자로 전달할 수 있다.

def so_simple2(st):
	print(st)   # 매개 변수 st로 전달된 대상을 출력함

so_simple2([1, 3, 5])   # list를 전달하면서 함수 호출

# 결괏값 : [1, 3, 5]

# 다음과 같이 함수 내에서 list를 반환할 수도 있다.

def so_simple3():
	st = [1, 2, 3, 4, 5]
	return st  #list를 반환한다.

r = so_simple3()    # 반환되는 list를 변수 r에 저장
print(r)

# 결괏값 : [1, 2, 3, 4, 5]


# 문자열의 경우도 마찬가지

def so_simple4(s):
	print(s)
	return "Bye"   # 문자열 "Bye"를 반환

 r = so_simple4("hello")   # 문자열 "hello를 전달, 그리고 반환되는 값 r에 저장"


print(r)   # 반환된 결과물 출력함




# 5 - 4. 연습문제






























